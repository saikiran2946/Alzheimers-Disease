{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIRAN\\\\OneDrive\\\\Documents\\\\Desktop\\\\New folder\\\\frontend\\\\src\\\\Prediction.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./Prediction.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Prediction = () => {\n  _s();\n  const [features, setFeatures] = useState({\n    Age: \"\",\n    BMI: \"\",\n    DietQuality: \"\",\n    SleepQuality: \"\",\n    CholesterolTotal: \"\",\n    CholesterolHDL: \"\",\n    CholesterolTriglycerides: \"\",\n    MMSE: \"\",\n    FunctionalAssessment: \"\",\n    MemoryComplaints: \"\",\n    ADL: \"\",\n    BehavioralProblems: \"\"\n  });\n  const [prediction, setPrediction] = useState(null);\n  const handleChange = e => {\n    setFeatures({\n      ...features,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handlePrediction = async () => {\n    try {\n      const featureValues = Object.values(features).map(value => value ? Number(value) : 0);\n      console.log(\"Sending features:\", features);\n      const response = await axios.post(\"http://127.0.0.1:5000/predict\", {\n        features: featureValues\n      });\n      setPrediction(response.data.prediction);\n    } catch (error) {\n      alert(\"Prediction failed. Check the inputs and try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Alzheimer\\u2019s Disease Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), Object.keys(features).map((key, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: key,\n        children: [key, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: key,\n        type: \"number\",\n        name: key,\n        placeholder: `Enter ${key}`,\n        value: features[key],\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePrediction,\n      children: \"Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Result: \", prediction]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Prediction, \"zAsoApyyzQB6PY4Pv0JTF/p9oGQ=\");\n_c = Prediction;\nexport default Prediction;\nvar _c;\n$RefreshReg$(_c, \"Prediction\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Prediction","_s","features","setFeatures","Age","BMI","DietQuality","SleepQuality","CholesterolTotal","CholesterolHDL","CholesterolTriglycerides","MMSE","FunctionalAssessment","MemoryComplaints","ADL","BehavioralProblems","prediction","setPrediction","handleChange","e","target","name","value","handlePrediction","featureValues","Object","values","map","Number","console","log","response","post","data","error","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","keys","key","index","htmlFor","id","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/KIRAN/OneDrive/Documents/Desktop/New folder/frontend/src/Prediction.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Prediction.css\";\r\n\r\nconst Prediction = () => {\r\n  const [features, setFeatures] = useState({\r\n    Age: \"\", \r\n    BMI: \"\",\r\n    DietQuality: \"\",\r\n    SleepQuality: \"\",\r\n    CholesterolTotal: \"\",\r\n    CholesterolHDL: \"\",\r\n    CholesterolTriglycerides: \"\",\r\n    MMSE: \"\",\r\n    FunctionalAssessment: \"\",\r\n    MemoryComplaints: \"\",\r\n    ADL: \"\",\r\n    BehavioralProblems: \"\",\r\n  });\r\n\r\n  const [prediction, setPrediction] = useState(null);\r\n\r\n  const handleChange = (e) => {\r\n    setFeatures({ ...features, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handlePrediction = async () => {\r\n    try {\r\n      const featureValues = Object.values(features).map(value => (value ? Number(value) : 0));\r\n      console.log(\"Sending features:\", features); \r\n      const response = await axios.post(\"http://127.0.0.1:5000/predict\", {\r\n        features: featureValues,\r\n      });\r\n      setPrediction(response.data.prediction);\r\n    } catch (error) {\r\n      alert(\"Prediction failed. Check the inputs and try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"prediction-container\">\r\n      <h2>Alzheimerâ€™s Disease Prediction</h2>\r\n      {Object.keys(features).map((key, index) => (\r\n        <div key={index} className=\"input-group\">\r\n          <label htmlFor={key}>{key}:</label>\r\n          <input id={key} type=\"number\" name={key} placeholder={`Enter ${key}`} value={features[key]} onChange={handleChange} />\r\n        </div>\r\n      ))}\r\n      <button onClick={handlePrediction}>Predict</button>\r\n      {prediction && <h3>Result: {prediction}</h3>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Prediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}