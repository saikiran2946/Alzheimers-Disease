{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIRAN\\\\OneDrive\\\\Documents\\\\Desktop\\\\New folder\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport PredictForm from \"./components/PredictForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [predictionResult, setPredictionResult] = useState(null);\n  const handleFormSubmit = async formData => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      setPredictionResult(data.prediction); // Expecting \"Alzheimer\" or \"No Alzheimer\"\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col items-center justify-center bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(PredictForm, {\n      onSubmit: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), predictionResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 bg-white p-4 rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold\",\n        children: \"Prediction Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg text-blue-600\",\n        children: predictionResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"sbFS43IkxbRMDeRetamDKn3eL6U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","PredictForm","jsxDEV","_jsxDEV","App","_s","predictionResult","setPredictionResult","handleFormSubmit","formData","response","fetch","method","headers","body","JSON","stringify","data","json","prediction","error","console","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/KIRAN/OneDrive/Documents/Desktop/New folder/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport PredictForm from \"./components/PredictForm\";\r\n\r\nconst App = () => {\r\n    const [predictionResult, setPredictionResult] = useState(null);\r\n\r\n    const handleFormSubmit = async (formData) => {\r\n        try {\r\n            const response = await fetch(\"http://127.0.0.1:5000/predict\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n\r\n            const data = await response.json();\r\n            setPredictionResult(data.prediction);  // Expecting \"Alzheimer\" or \"No Alzheimer\"\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n            <PredictForm onSubmit={handleFormSubmit} />\r\n            {predictionResult && (\r\n                <div className=\"mt-4 bg-white p-4 rounded-lg shadow-md\">\r\n                    <h2 className=\"text-xl font-bold\">Prediction Result:</h2>\r\n                    <p className=\"text-lg text-blue-600\">{predictionResult}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE9D,MAAMQ,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;IACzC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAC1DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;MACjC,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCX,mBAAmB,CAACU,IAAI,CAACE,UAAU,CAAC,CAAC,CAAE;IAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,oBACIjB,OAAA;IAAKmB,SAAS,EAAC,oEAAoE;IAAAC,QAAA,gBAC/EpB,OAAA,CAACF,WAAW;MAACuB,QAAQ,EAAEhB;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC1CtB,gBAAgB,iBACbH,OAAA;MAAKmB,SAAS,EAAC,wCAAwC;MAAAC,QAAA,gBACnDpB,OAAA;QAAImB,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAC;MAAkB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzDzB,OAAA;QAAGmB,SAAS,EAAC,uBAAuB;QAAAC,QAAA,EAAEjB;MAAgB;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACvB,EAAA,CA/BID,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAiCT,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}